

import numpy as np
from os import urandom

n=2**12
Y = np.frombuffer(urandom(n), dtype=np.uint8); Y = Y & 1;
plain0 = np.frombuffer(urandom(2*n),dtype=np.uint16);
plain1 = plain0 ^ 1;
plain2 = plain0 ^ 2;
plain3 = plain0 ^ 3;
num_rand_samples = np.sum(Y==0);
plain1[Y==0] = np.frombuffer(urandom(2*num_rand_samples),dtype=np.uint16);
plain2[Y==0] = np.frombuffer(urandom(2*num_rand_samples),dtype=np.uint16);
plain3[Y==0] = np.frombuffer(urandom(2*num_rand_samples),dtype=np.uint16);
def convert_to_binary(arr):
        """ Convert decimal to binary bits"""
        X = np.zeros((4,n), dtype=np.uint8);
        for i in range(4):
            offset=3 - i;
            X[i]=(arr >> offset) & 1;
            # TODO: write code...
        return (X)
        

p0=convert_to_binary(plain0);
p1=convert_to_binary(plain1);
p2=convert_to_binary(plain2);
p3=convert_to_binary(plain3);

z0 = np.zeros((4,n), dtype=np.uint8);
z0[0 + 3] = 1 ^ p0[0] ^ p0[0 + 1] ^ p0[0 + 3] ^ (p0[0 + 1] & p0[0 + 2]) ^ (p0[0] & p0[0 + 1] & p0[0 + 2]) ^ (
                    p0[0] & p0[0 + 1] & p0[0 + 3]) ^ (p0[0] & p0[0 + 2] & p0[0 + 3])
					
					
z0[0 + 2] = 1 ^ p0[0 + 2] ^ p0[0 + 3] ^ (p0[0] & p0[0 + 1]) ^ (p0[0] & p0[0 + 3]) ^ (p0[0 + 1] & p0[0 + 3]) ^ (
                    p0[0] & p0[0 + 1] & p0[0 + 3]) ^ (p0[0] & p0[0 + 2] & p0[0 + 3])
					
					
z0[0 + 1] = p0[0 + 1] ^ p0[0 + 3] ^ (p0[0 + 1] & p0[0 + 3]) ^ (p0[0 + 2] & p0[0 + 3]) ^ (
                    p0[0] & p0[0 + 1] & p0[0 + 2]) ^ (p0[0] & p0[0 + 1] & p0[0 + 3]) ^ (p0[0] & p0[0 + 2] & p0[0 + 3])
					
					
z0[0] = p0[0] ^ p0[0 + 2] ^ p0[0 + 3] ^ (p0[0 + 1] & p0[0 + 2])
z1 = np.zeros((4,n), dtype=np.uint8);
z1[0 + 3] = 1 ^ p1[0] ^ p1[0 + 1] ^ p1[0 + 3] ^ (p1[0 + 1] & p1[0 + 2]) ^ (p1[0] & p1[0 + 1] & p1[0 + 2]) ^ (
                    p1[0] & p1[0 + 1] & p1[0 + 3]) ^ (p1[0] & p1[0 + 2] & p1[0 + 3])
					
					
z1[0 + 2] = 1 ^ p1[0 + 2] ^ p1[0 + 3] ^ (p1[0] & p1[0 + 1]) ^ (p1[0] & p1[0 + 3]) ^ (p1[0 + 1] & p1[0 + 3]) ^ (
                    p1[0] & p1[0 + 1] & p1[0 + 3]) ^ (p1[0] & p1[0 + 2] & p1[0 + 3])
					
					
z1[0 + 1] = p1[0 + 1] ^ p1[0 + 3] ^ (p1[0 + 1] & p1[0 + 3]) ^ (p1[0 + 2] & p1[0 + 3]) ^ (
                    p1[0] & p1[0 + 1] & p1[0 + 2]) ^ (p1[0] & p1[0 + 1] & p1[0 + 3]) ^ (p1[0] & p1[0 + 2] & p1[0 + 3])
					
					
z1[0] = p1[0] ^ p1[0 + 2] ^ p1[0 + 3] ^ (p1[0 + 1] & p1[0 + 2])



z2 = np.zeros((4,n), dtype=np.uint8);
z2[0 + 3] = 1 ^ p2[0] ^ p2[0 + 1] ^ p2[0 + 3] ^ (p2[0 + 1] & p2[0 + 2]) ^ (p2[0] & p2[0 + 1] & p2[0 + 2]) ^ (
                    p2[0] & p2[0 + 1] & p2[0 + 3]) ^ (p2[0] & p2[0 + 2] & p2[0 + 3])
					
					
z2[0 + 2] = 1 ^ p2[0 + 2] ^ p2[0 + 3] ^ (p2[0] & p2[0 + 1]) ^ (p2[0] & p2[0 + 3]) ^ (p2[0 + 1] & p2[0 + 3]) ^ (
                    p2[0] & p2[0 + 1] & p2[0 + 3]) ^ (p2[0] & p2[0 + 2] & p2[0 + 3])
					
					
z2[0 + 1] = p2[0 + 1] ^ p2[0 + 3] ^ (p2[0 + 1] & p2[0 + 3]) ^ (p2[0 + 2] & p2[0 + 3]) ^ (
                    p2[0] & p2[0 + 1] & p2[0 + 2]) ^ (p2[0] & p2[0 + 1] & p2[0 + 3]) ^ (p2[0] & p2[0 + 2] & p2[0 + 3])
					
					
z2[0] = p2[0] ^ p2[0 + 2] ^ p2[0 + 3] ^ (p2[0 + 1] & p2[0 + 2])


z3 = np.zeros((4,n), dtype=np.uint8);
z3[0 + 3] = 1 ^ p3[0] ^ p3[0 + 1] ^ p3[0 + 3] ^ (p3[0 + 1] & p3[0 + 2]) ^ (p3[0] & p3[0 + 1] & p3[0 + 2]) ^ (
                    p3[0] & p3[0 + 1] & p3[0 + 3]) ^ (p3[0] & p3[0 + 2] & p3[0 + 3])
					
					
z3[0 + 2] = 1 ^ p3[0 + 2] ^ p3[0 + 3] ^ (p3[0] & p3[0 + 1]) ^ (p3[0] & p3[0 + 3]) ^ (p3[0 + 1] & p3[0 + 3]) ^ (
                    p3[0] & p3[0 + 1] & p3[0 + 3]) ^ (p3[0] & p3[0 + 2] & p3[0 + 3])
					
					
z3[0 + 1] = p3[0 + 1] ^ p3[0 + 3] ^ (p3[0 + 1] & p3[0 + 3]) ^ (p3[0 + 2] & p3[0 + 3]) ^ (
                    p3[0] & p3[0 + 1] & p3[0 + 2]) ^ (p3[0] & p3[0 + 1] & p3[0 + 3]) ^ (p3[0] & p3[0 + 2] & p3[0 + 3])
					
					
z3[0] = p3[0] ^ p3[0 + 2] ^ p3[0 + 3] ^ (p3[0 + 1] & p3[0 + 2])

mask0=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
mask1=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
mask2=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
mask3=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]


decz0=z0[0]+2*z0[1]+4*z0[2]+8*z0[3]
decz1=z1[0]+2*z1[1]+4*z1[2]+8*z1[3]
decz2=z2[0]+2*z2[1]+4*z2[2]+8*z2[3]
decz3=z3[0]+2*z3[1]+4*z3[2]+8*z3[3]

f = np.zeros((50625,n), dtype=np.uint8);
i=0
while i<15 :
  j=0
  while j<15:
    z=0
    while z<15:
      k=0
      while k<15:
        f[k+15*i+15*j+15*z]=(decz0*mask0[i])%16^(decz1*mask1[j])%16^(decz2*mask2[z])%16^(decz3*mask3[k])%16
        k+=1
      z+=1
    j+=1
  i+=1;

print('1')

print(f[0].reshape((-1,1)).shape)
x = np.zeros((4096,4096,1), dtype=np.uint8);

x[0]=f[0].reshape((-1,1))
x[1]=f[1].reshape((-1,1))

X=np.concatenate([x[0],x[1]],axis=1)
i=2
while i<4096 :
    x[i]=f[i].reshape((-1,1))
    X=np.concatenate([X,x[i]],axis=1)
    print(i)
    i+=1;


from sklearn.linear_model import LinearRegression


model = LinearRegression()
model =model.fit(X, Y)
print(model.score(X, Y))
