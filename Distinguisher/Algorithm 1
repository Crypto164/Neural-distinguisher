import numpy as np
from os import urandom
from tensorflow.keras.regularizers import l2
from tensorflow.keras.backend import concatenate
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Dense, AveragePooling1D, Conv1D, MaxPooling1D, Input, Reshape, Permute, Add, Flatten, BatchNormalization, Activation
from tensorflow.nn import dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import ModelCheckpoint, LearningRateScheduler
# import keras
from pickle import dump
import tensorflow as tf
import numpy as np
import tensorflow




diff=(0x10);


import numpy as np


def concatenate_4arrays(arr1, arr2, arr3, arr4):
    # combine the arrays into a single 2D array
    combined = np.vstack((arr1, arr2, arr3, arr4)).T

    # use bitwise operations to convert each row to a single value
    result = (combined[:, 0] << 3) | (combined[:, 1] << 2) | (combined[:, 2] << 1) | combined[:, 3]

    return result.astype(np.uint8)


def concatenate_arrays(arr1, arr2):
    # combine the arrays into a single 2D array
    combined = np.vstack((arr1, arr2)).T

    # use bitwise operations to convert each row to a single value
    result = (combined[:, 0] << 1) | combined[:, 1]

    return result.astype(np.uint8)


def convert_to_6_bit(data, k=6):
    n = len(data)
    bit_data = np.zeros((k, n), dtype=np.uint8)
    for j in range(k):
        bit_mask = 1 << (k - j - 1)
        bit_data[j, :] = (data & bit_mask) >> (k - j - 1)
    return bit_data
	
n = 10**7  # or any other desired array size



def sbox_s4(data) -> np.ndarray:

    bin=convert_to_6_bit(data)
    b = concatenate_4arrays(bin[1], bin[2], bin[3], bin[4])
    a = concatenate_arrays(bin[0], bin[5])
    sbox = np.array([
        [0x7, 0xd, 0xe, 0x3, 0x0, 0x6, 0x9, 0xa, 0x1, 0x2, 0x8, 0x5, 0xb, 0xc, 0x4, 0xf],
        [0xd, 0x8, 0xb, 0x5, 0x6, 0xf, 0x0, 0x3, 0x4, 0x7, 0x2, 0xc, 0x1, 0xa, 0xe, 0x9],
        [0xa, 0x6, 0x9, 0x0, 0xc, 0xb, 0x7, 0xd, 0xf, 0x1, 0x3, 0xe, 0x5, 0x2, 0x8, 0x4],
        [0x3, 0xf, 0x0, 0x6, 0xa, 0x1, 0xd, 0x8, 0x9, 0x4, 0x5, 0xb, 0xc, 0x7, 0x2, 0xe]
    ], dtype=np.uint8)
    output=np.take(sbox, np.ravel_multi_index((a, b), sbox.shape)).astype(np.uint8).transpose()
    boutput=convert_to_6_bit(output,4).transpose()
    return output

def make_data(n):
    
      Y = np.frombuffer(urandom(n), dtype=np.uint8); Y = Y & 1;
      plain0 = np.frombuffer(urandom(n), dtype=np.uint8);  # generate array with values between 0 and 255
      plain0 = np.floor_divide(plain0, 4);
      plain1 = plain0 ^ diff;
      plain2 = np.frombuffer(urandom(n), dtype=np.uint8);  # generate array with values between 0 and 255
      plain2 = np.floor_divide(plain2, 4);
      plain3 = plain2 ^ diff;
      num_rand_samples = np.sum(Y==0);
      plain1[Y==0] = np.frombuffer(urandom(num_rand_samples), dtype=np.uint8);  # generate array with values between 0 and 255
      plain1[Y==0] = np.floor_divide(plain1[Y==0], 4);
      plain3[Y==0] = np.frombuffer(urandom(num_rand_samples), dtype=np.uint8);  # generate array with values between 0 and 255
      plain3[Y==0] = np.floor_divide(plain3[Y==0], 4);
      s0=sbox_s4(plain0);
      s1=sbox_s4(plain1);
      s2=sbox_s4(plain2);
      s3=sbox_s4(plain3); 
      mask1 = np.array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F], dtype=np.uint8);
      mask2 = np.array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F], dtype=np.uint8);
      
      output = np.zeros((256,n), dtype=np.uint8)
      X = np.zeros((256,4,n), dtype=np.uint8)
	  
      index = np.ix_(mask1, mask2)

# Compute the XOR of all possible pairs of input values using NumPy broadcasting
      for j in range(0, 16):
        for z in range(0, 16):
          
		  output[j * 16 + z] = (index[0][j][0]&s0)^ (index[1][0][z]&s1)
          #X[j * 16 + z]=convert_to_6_bit(output[j * 16 + z],4)

      output=output.transpose()
      return(output,Y);

		
n=2**18;
n1=2**16;

X, Y = make_data(n)
X_test, y_test = make_data(n1)


from sklearn.neural_network import MLPClassifier
from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split


# Create an MLP classifier with two hidden layers, each containing 10 neurons
clf = MLPClassifier(hidden_layer_sizes=(100, 100), random_state=42)

# Fit the classifier to the training data
clf.fit(X, Y)
accuracy = clf.score(X_test, y_test)

print("Accuracy:", accuracy)
