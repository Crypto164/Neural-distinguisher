import numpy as np
from os import urandom

def WORD_SIZE():
    return(16);

def ALPHA():
    return(7);

def BETA():
    return(2);

MASK_VAL = 2 ** WORD_SIZE() - 1;

def shuffle_together(l):
    state = np.random.get_state();
    for x in l:
        np.random.set_state(state);
        np.random.shuffle(x);

def rol(x,k):
    return(((x << k) & MASK_VAL) | (x >> (WORD_SIZE() - k)));

def ror(x,k):
    return((x >> k) | ((x << (WORD_SIZE() - k)) & MASK_VAL));

def enc_one_round(p, k):
    c0, c1 = p[0], p[1];
    c0 = ror(c0, ALPHA());
    c0 = (c0 + c1) & MASK_VAL;
    c0 = c0 ^ k;
    c1 = rol(c1, BETA());
    c1 = c1 ^ c0;
    return(c0,c1);

def dec_one_round(c,k):
    c0, c1 = c[0], c[1];
    c1 = c1 ^ c0;
    c1 = ror(c1, BETA());
    c0 = c0 ^ k;
    c0 = (c0 - c1) & MASK_VAL;
    c0 = rol(c0, ALPHA());
    return(c0, c1);

def expand_key(k, t):
    ks = [0 for i in range(t)];
    ks[0] = k[len(k)-1];
    l = list(reversed(k[:len(k)-1]));
    for i in range(t-1):
        l[i%3], ks[i+1] = enc_one_round((l[i%3], ks[i]), i);
    return(ks);

def encrypt(p, ks):
    x, y = p[0], p[1];
    for k in ks:
        x,y = enc_one_round((x,y), k);
    return(x, y);

def decrypt(c, ks):
    x, y = c[0], c[1];
    for k in reversed(ks):
        x, y = dec_one_round((x,y), k);
    return(x,y);


def convert_to_binary(arr):
  X = np.zeros((2* WORD_SIZE(),len(arr[0])),dtype=np.uint8)
  for i in range(2* WORD_SIZE()):
      index = i // WORD_SIZE()
      offset = WORD_SIZE() - (i % WORD_SIZE()) - 1
      X[i] = (arr[index] >> offset) & 1
  return(X)

    

def key_rank_one_round(nr, net, n_blocks=1,n=1):

    keys = np.frombuffer(urandom(8*n),dtype=np.uint16).reshape(4,-1)
    ks = expand_key(keys, nr)
    k1=ks[nr-1]
    plainl = np.frombuffer(urandom(2*n),dtype=np.uint16)
    plainr = np.frombuffer(urandom(2*n),dtype=np.uint16)
    Xreall = np.zeros((16,n),dtype=np.uint16)
    Xrealr = np.zeros((16,n),dtype=np.uint16)
    for i in range(16):
          Xreall[i]=plainl+i
          Xrealr[i]=plainr
    creall,crealr=encrypt((Xreall,Xrealr),ks) 

    trial_keys = np.arange(2**16)
    c0a, c1a = dec_one_round((creall,crealr),trial_keys)
  
    c1a = np.tile(c1a,2**16)
  
    Xreal =  np.zeros((16,32,2**16),dtype=np.uint16) 
    for i in range(16):
            Xreal[i] =  convert_to_binary([c0a[i].flatten(), c1a[i].flatten()])

    Xreal=Xreal.reshape(512,2**16)
    X=Xreal.transpose()
    Z = net.predict(X,batch_size=10000); Z = Z/(1-Z)
    Z = np.log2(Z);       

    rank0 = np.sum(Z > Z[k1]); rank1 = np.sum(Z >= Z[k1])
    return(rank0, rank1)


def stats_key_rank(n, nr, net, n_blocks):
      r = np.zeros(n)
      from random import randint
      for i in range(n):
         a,b = key_rank_one_round(nr, net, n_blocks=n_blocks)
         r[i] = randint(a,b)
      return(np.median(r), np.mean(r), r)

from keras.models import load_model

# load model
net = load_model('address of the loaded model')
a,b,r = stats_key_rank(10, 6,net,n_blocks=16)


print(r)
